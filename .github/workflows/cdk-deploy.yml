name: CDK Deploy

on:
  workflow_call:
    inputs:
      service:
        type: string
        description: "Service to Deploy"
        required: true
      deployment-environment:
        type: string
        description: "Environment to Deploy"
        required: true
      python-version:
        type: string
        description: "Python version to use"
        required: false
        default: "3.11"
      region:
        type: string
        description: "AWS Region to deploy to"
        required: false
        default: "us-east-1"
      main-resources-name:
        type: string
        description: "Main resources name for the app"
        required: false
        default: "recipe-book"

env:
  AWS_DEFAULT_REGION: ${{ inputs.region }}
  AWS_DEFAULT_OUTPUT: json
  DEPLOYMENT_ENVIRONMENT: ${{ inputs.deployment-environment }}

jobs:
  cdk-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install Poetry dependencies
        run: poetry install --no-interaction

      - name: Set up NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install CDK
        run: npm install -g aws-cdk

      # Same task with different secrets depending on the branch ref (dev vs prod deployments)
      # Note: there might be better alternatives, but this is a way to deploy to both envs
      - name: Configure AWS Credentials (DEV)
        if: inputs.deployment-environment == 'dev'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.DEV_AWS_ACCOUNT_ID }}:role/${{ secrets.DEV_AWS_DEPLOY_ROLE }}
          role-session-name: GitHubActionsCICD

      - name: Configure AWS Credentials (PROD)
        if: inputs.deployment-environment == 'prod'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.PROD_AWS_ACCOUNT_ID }}:role/${{ secrets.PROD_AWS_DEPLOY_ROLE }}
          role-session-name: GitHubActionsCICD

      - name: Build Frontend Application (if needed)
        if: inputs.service == 'frontend'
        run: |
          # NOTE: These could be more optimized in the future... For now, dynamically fetch them one by one
          VITE_BACKEND_API_URL=$(aws cloudformation describe-stacks --stack-name ${{ inputs.main-resources-name }}-backend-${{ inputs.deployment-environment }} --query "Stacks[0].Outputs[?OutputKey=='BackendAPIUrl'].OutputValue" --output text)
          VITE_APP_USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name ${{ inputs.main-resources-name }}-backend-${{ inputs.deployment-environment }} --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" --output text)
          VITE_APP_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name ${{ inputs.main-resources-name }}-backend-${{ inputs.deployment-environment }} --query "Stacks[0].Outputs[?OutputKey=='ClientId'].OutputValue" --output text)
          VITE_COGNITO_HOSTED_UI_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ inputs.main-resources-name }}-backend-${{ inputs.deployment-environment }} --query "Stacks[0].Outputs[?OutputKey=='CognitoHostedUIEndpoint'].OutputValue" --output text)
          # Replace backend variables to frontend
          sed -i "s|REPLACE_ME_FOR_BACKEND_API_URL|$VITE_BACKEND_API_URL|g" frontend/src/GLOBAL_VARS.jsx
          sed -i "s|REPLACE_ME_FOR_USER_POOL_ID|$VITE_APP_USER_POOL_ID|g" frontend/src/GLOBAL_VARS.jsx
          sed -i "s|REPLACE_ME_FOR_CLIENT_ID|$VITE_APP_CLIENT_ID|g" frontend/src/GLOBAL_VARS.jsx
          sed -i "s|REPLACE_ME_FOR_COGNITO_HOSTED_UI_ENDPOINT|$VITE_COGNITO_HOSTED_UI_ENDPOINT|g" frontend/src/GLOBAL_VARS.jsx
          # Build frontend
          cd frontend
          npm install .
          npm run build
          cd ..

      - name: CDK Deploy
        run: |
          source .venv/bin/activate
          cdk deploy "${{ inputs.main-resources-name }}-${{ inputs.service }}-${{ inputs.deployment-environment }}" --require-approval never
